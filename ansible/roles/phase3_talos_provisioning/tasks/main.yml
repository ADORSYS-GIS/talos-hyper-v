---
- name: Execute full terraform apply for Talos cluster provisioning
  ansible.builtin.command: "terraform apply -auto-approve -var-file=cluster.tfvars"
  args:
    chdir: "{{ terraform_dir }}"
  register: tf_talos_provisioning_output
  delegate_to: localhost

- name: Extract controlplane IPs from cluster.tfvars
  ansible.builtin.set_fact:
    controlplane_ips: "{{ lookup('file', '{{ playbook_dir }}/../terraform/cluster.tfvars') | regex_findall('name = \".*?\", role = \"controlplane.*\", ip = \"(.*?)\"', multiline=True) | flatten }}"
  delegate_to: localhost

- name: Wait for Talos cluster to be healthy
  ansible.builtin.command: "talosctl --talosconfig={{ terraform_dir }}/talosconfig health --nodes {{ controlplane_ips | join(',') }}"
  args:
    chdir: "{{ terraform_dir }}"
  register: talos_health_check
  until: talos_health_check.rc == 0
  retries: 60
  delay: 10
  delegate_to: localhost

- name: Verify all Talos nodes have joined the cluster
  ansible.builtin.command: "talosctl --talosconfig={{ terraform_dir }}/talosconfig get members"
  args:
    chdir: "{{ terraform_dir }}"
  register: talos_members_check
  until: talos_members_check.stdout is search("Ready") and talos_members_check.stdout is search("controlplane") and talos_members_check.stdout is search("worker") # Basic check for controlplane and worker nodes
  retries: 30
  delay: 10
  delegate_to: localhost

- name: Notify user that Talos cluster is provisioned and healthy
  ansible.builtin.debug:
    msg: "Talos cluster is provisioned and healthy."
  delegate_to: localhost