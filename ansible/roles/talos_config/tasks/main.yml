---
- name: Get Terraform outputs
  ansible.builtin.command: terraform output -json
  args:
    chdir: "{{ tf_dir }}"
  register: tfout
  delegate_to: localhost

- name: Parse Terraform outputs
  ansible.builtin.set_fact:
    vm_map: "{{ tfout.stdout | from_json.vm_map.value }}"
  delegate_to: localhost

- name: Generate base Talos config
  ansible.builtin.command: >
    talosctl gen config mycluster https://{{ api_vip }}:6443 --output-dir {{ tf_dir }}/clusterconfig
  args:
    creates: "{{ tf_dir }}/clusterconfig/controlplane.yaml"
  delegate_to: localhost

- name: Apply config to first control plane
  ansible.builtin.command: >
    talosctl apply-config --insecure -n {{ (vm_map | selectattr('role','equalto','controlplane') | list | first).ip }}
    --file {{ tf_dir }}/clusterconfig/controlplane-{{ (vm_map | selectattr('role','equalto','controlplane') | list | first).name }}.yaml
  delegate_to: localhost

- name: Bootstrap cluster
  ansible.builtin.command: >
    talosctl bootstrap --nodes {{ (vm_map | selectattr('role','equalto','controlplane') | list | first).ip }}
    --endpoints https://{{ api_vip }}:6443
  delegate_to: localhost

- name: Apply config to remaining control planes
  ansible.builtin.command: >
    talosctl apply-config --insecure -n {{ item.ip }}
    --file {{ tf_dir }}/clusterconfig/controlplane-{{ item.name }}.yaml
  loop: "{{ vm_map | selectattr('role','equalto','controlplane') | rejectattr('name','equalto', (vm_map | selectattr('role','equalto','controlplane') | list | first).name ) }}"
  loop_control:
    label: "{{ item.name }}"
  delegate_to: localhost

- name: Apply config to workers
  ansible.builtin.command: >
    talosctl apply-config --insecure -n {{ item.ip }}
    --file {{ tf_dir }}/clusterconfig/worker-{{ item.name }}.yaml
  loop: "{{ vm_map | selectattr('role','equalto','worker') }}"
  loop_control:
    label: "{{ item.name }}"
  delegate_to: localhost

- name: Fetch kubeconfig
  ansible.builtin.command: >
    talosctl kubeconfig --endpoints https://{{ api_vip }}:6443 --force
  args:
    chdir: "{{ tf_dir }}/clusterconfig"
  delegate_to: localhost

- name: Set VM boot order to disk
  ansible.windows.win_shell: |
    $hd = Get-VMHardDiskDrive -VMName {{ item.name }}
    Set-VMFirmware -VMName {{ item.name }} -FirstBootDevice $hd
  loop: "{{ vm_map }}"
  loop_control:
    label: "{{ item.name }}"
