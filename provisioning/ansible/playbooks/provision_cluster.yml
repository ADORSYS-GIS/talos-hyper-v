---
- name: Provision Talos cluster
  hosts: controller
  gather_facts: false
  vars:
    tf_dir: "{{ tf_dir | default('C:/terraform/talos-hyperv') }}"
    iso_path: "{{ iso_path | default('C:/isos/talos-metal-amd64.iso') }}"
    switch: "{{ switch | default('ExternalSwitch') }}"
    api_vip: "{{ api_vip }}"
    cp_count: "{{ cp_count | int }}"
    wk_count: "{{ wk_count | int }}"
    ip_range_start: "{{ ip_range_start }}"
    ip_range_end: "{{ ip_range_end }}"
    vm_prefix: "{{ vm_prefix | default('talos') }}"
    hyperv_hosts: "{{ hyperv_hosts }}"  # dict of hyperv_host => {host, user, password}
  tasks:

    - name: Generate cluster.tfvars from template
      ansible.builtin.template:
        src: ../templates/cluster.tfvars.j2
        dest: "{{ tf_dir }}/cluster.tfvars"
      vars:
        cp_count: "{{ cp_count }}"
        wk_count: "{{ wk_count }}"
        ip_range_start: "{{ ip_range_start }}"
        ip_range_end: "{{ ip_range_end }}"
        vm_prefix: "{{ vm_prefix }}"
        hyperv_hosts: "{{ hyperv_hosts }}"
      delegate_to: localhost

    - name: Run terraform init
      ansible.builtin.command: terraform init
      args:
        chdir: "{{ tf_dir }}"

    - name: Run terraform apply
      ansible.builtin.command: terraform apply -var-file="{{ tf_dir }}/cluster.tfvars" -auto-approve
      args:
        chdir: "{{ tf_dir }}"

    - name: Get Terraform outputs
      ansible.builtin.command: terraform output -json vm_map -var-file="{{ tf_dir }}/cluster.tfvars"
      args:
        chdir: "{{ tf_dir }}"
      register: tfout

    - name: Parse Terraform outputs
      ansible.builtin.set_fact:
        vm_map: "{{ tfout.stdout | from_json | dict2items | map(attribute='value') | sum(start=[]) }}"

    - name: Generate base Talos config
      ansible.builtin.command: >
        talosctl gen config mycluster https://{{ api_vip }}:6443 --output-dir {{ tf_dir }}/clusterconfig
      args:
        creates: "{{ tf_dir }}/clusterconfig/controlplane.yaml"

    - name: Patch static network config into Talos configs
      ansible.builtin.blockinfile:
        path: "{{ tf_dir }}/clusterconfig/{{ item.role }}-{{ item.name }}.yaml"
        block: |
          network:
            interfaces:
              - interface: eth0
                dhcp: false
                addresses:
                  - {{ item.ip }}/24
                gateway: {{ ip_range_start | regex_replace('(\d+)$','1') }}
                nameservers:
                  - {{ ip_range_start | regex_replace('(\d+)$','1') }}
      loop: "{{ vm_map }}"
      loop_control:
        label: "{{ item.name }}"
      create: yes
      marker: "# {mark} ANSIBLE MANAGED NETWORK BLOCK"

    - name: Apply config to first control plane
      ansible.builtin.command: >
        talosctl apply-config --insecure -n {{ vm_map | selectattr('role','equalto','controlplane') | list | first | map(attribute='ip') | first }}
        --file {{ tf_dir }}/clusterconfig/controlplane-{{ vm_map | selectattr('role','equalto','controlplane') | list | first | map(attribute='name') | first }}.yaml

    - name: Bootstrap cluster
      ansible.builtin.command: >
        talosctl bootstrap --nodes {{ vm_map | selectattr('role','equalto','controlplane') | list | first | map(attribute='ip') | first }}
        --endpoints https://{{ api_vip }}:6443

    - name: Apply config to remaining control planes
      ansible.builtin.command: >
        talosctl apply-config --insecure -n {{ item.ip }}
        --file {{ tf_dir }}/clusterconfig/controlplane-{{ item.name }}.yaml
      loop: "{{ vm_map | selectattr('role','equalto','controlplane') | rejectattr('name','equalto',vm_map | selectattr('role','equalto','controlplane') | list | first | map(attribute='name') | first ) }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Apply config to workers
      ansible.builtin.command: >
        talosctl apply-config --insecure -n {{ item.ip }}
        --file {{ tf_dir }}/clusterconfig/worker-{{ item.name }}.yaml
      loop: "{{ vm_map | selectattr('role','equalto','worker') }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Fetch kubeconfig
      ansible.builtin.command: >
        talosctl kubeconfig --endpoints https://{{ api_vip }}:6443 --force
      args:
        chdir: "{{ tf_dir }}/clusterconfig"

    - name: Set VM boot order to disk
      ansible.windows.win_shell: |
        $hd = Get-VMHardDiskDrive -VMName {{ item.name }}
        Set-VMFirmware -VMName {{ item.name }} -FirstBootDevice $hd
      loop: "{{ vm_map }}"
      loop_control:
        label: "{{ item.name }}"
